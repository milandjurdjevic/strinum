using System.CodeDom.Compiler;
using System.Collections.Immutable;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Strinum;

[Generator]
public class Generator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValueProvider<ImmutableArray<ISymbol?>> provider = context.SyntaxProvider
            .CreateSyntaxProvider(Filter, Transform)
            .Collect();

        context.RegisterSourceOutput(provider, GenerateSourceOutput);
    }

    private static void GenerateSourceOutput(SourceProductionContext context, ImmutableArray<ISymbol?> symbols)
    {
        IndentedTextWriter writer = new(new StringWriter());
        writer.WriteLine("// <auto-generated />");
        writer.WriteLine("namespace Strinum");
        writer.WriteLine('{');
        writer.Indent++;
        writer.WriteLine("public static class Extensions");
        writer.WriteLine('{');
        writer.Indent++;
        foreach (ITypeSymbol symbol in symbols.OfType<ITypeSymbol>())
        {
            writer.WriteLine($"public static string Stringify(this global::{symbol.ToDisplayString()} enumeration)");
            writer.WriteLine('{');
            writer.Indent++;
            writer.WriteLine("return enumeration switch");
            writer.WriteLine('{');
            writer.Indent++;
            foreach (IFieldSymbol field in symbol.GetMembers().OfType<IFieldSymbol>())
            {
                writer.WriteLine($"global::{field.ToDisplayString()} => \"{field.Name}\",");
            }

            writer.WriteLine("_ => global::System.String.Empty");
            writer.Indent--;
            writer.WriteLine("};");
            writer.Indent--;
            writer.WriteLine('}');
        }

        writer.Indent--;
        writer.WriteLine('}');
        writer.Indent--;
        writer.WriteLine('}');
        context.AddSource("Strinum.Extensions.g.cs", writer.InnerWriter.ToString());
    }

    private static ISymbol? Transform(GeneratorSyntaxContext context, CancellationToken token)
    {
        return context.SemanticModel.GetDeclaredSymbol(context.Node);
    }

    private static bool Filter(SyntaxNode node, CancellationToken token)
    {
        return node is EnumDeclarationSyntax;
    }
}